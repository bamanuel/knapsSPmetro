package com.knaps.dev;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.util.Log;

public class myDB extends Activity {
	private final String TAG = "myDB";
	private SQLiteDatabase db;
	private final Context context;
	private final DataBaseHelper dbhelper;
	public myDB(Context c){
		context = c;
		dbhelper = new DataBaseHelper(context);
	}
	public void close(){
		db.close();
	}
	public void open() throws SQLiteException
	{
		try{
			db = dbhelper.getWritableDatabase();
		}catch (SQLiteException e){
			Log.v("Open database exception caught", e.getMessage());
			db = dbhelper.getReadableDatabase();
		}
	}
	
	public ArrayList<Line> getAllLines(){
		ArrayList<Line> lines = new ArrayList<Line>();
		
		this.open();
    	Cursor c = db.rawQuery("SELECT _id, displayName, number FROM line", null);
    	Log.d(TAG, "Cursor created with " + c.getCount() +" items");
    	this.close();
    	
    	startManagingCursor(c);
    	if(c.moveToFirst()){
    		do{
    			Line temp = new Line(c.getInt(0), c.getString(1), c.getInt(3), TestProjectActivity.alertSubject);
    			//Line temp = new Line(c.getInt(0), , c.getString(2), ,c.getString(4),c.getInt(5),c.getString(6),c.getString(7), c.getDouble(8));
    			lines.add(temp);
    		}while(c.moveToNext());
    	}
    	
		return lines;
	}
	
	public ArrayList<Line> getLinesByStation(int stationId) {
		ArrayList<Line> lines = new ArrayList<Line>();
		
		this.open();
		Cursor c = db.rawQuery("SELECT " +
								"l._id" + 
								", l.name" +
								", l.displayName" +
								", l.number" +
								", l.color" +
								", c.name" +
								", l.iconURL"+
								", l.imgURL"+
								", l.tarifa" +
								"FROM line l"+ 
								"INNER JOIN stationline sl"+
								"INNER JOIN company c ON c._id = l.companyID" +
								"WHERE sl.stationId = ? AND sl.lineID = l._id", new String[] {Integer.toString(stationId)});
					
		this.close();
		
		getLineObjectArray(lines, c);
		return lines;
	}
	private void getLineObjectArray(ArrayList<Line> lines, Cursor c) {
		startManagingCursor(c);
		if (c.moveToFirst()){
			do{
				Line temp = new Line(c.getInt(0), 
									c.getString(1), 
									c.getString(2), 
									c.getInt(3), 
									c.getString(4), 
									c.getString(5), 
									c.getString(6), 
									c.getString(7), 
									c.getFloat(8),
									TestProjectActivity.alertSubject);
				lines.add(temp);
			}while(c.moveToNext());
		}
	}
	
	public Line getLine(int lineId){
ArrayList<Line> lines = new ArrayList<Line>();
		
		this.open();
		Cursor c = db.rawQuery("SELECT " +
								"l._id" + 
								", l.name" +
								", l.displayName" +
								", l.number" +
								", l.color" +
								", c.name" +
								", l.iconURL"+
								", l.imgURL"+
								", l.tarifa" +
								"FROM line l"+ 
								"INNER JOIN company c ON c._id = l.companyID" +
								"WHERE l._id = ?", new String[] {Integer.toString(lineId)});
					
		this.close();
		
		getLineObjectArray(lines, c);
		return lines;
	}
	
	public static ArrayList<Alert> getAllCurrentAlerts(){
		//TODO: Return all current alerts
		return null;
	}
	public static ArrayList<Station> getAllStations(){
		// TODO get ALL stations
		return null;
	}
	public static ArrayList<Station> getStationsByLine(int lineId) {
		// TODO Auto-generated method stub
		return null;
	}
	public static Station getStation(int stationId){
		// TODO get station by id
		return null;
	}
	public static ArrayList<PlannedRoute> getAllSavedRoutes(){
		// TODO get all saved routes
		return null;
	}
	public static PlannedRoute getSavedRoute(String name){
		// TODO get route by name
		return null;
	}
	
	public static void saveRoute(Route route){
		// TODO Save route to Preferences??
	}
	
	public boolean updateDatabase(){
		// TODO Update the Database from ONLINE (SYNC!)
		return true;
	}
	private Cursor getCursor(String tableName){
		 return db.query(tableName, null, null, null, null, null, null);
	}
	
	private Cursor getCursor(String tableName, String[] columns, String where, String[] args, String orderBy){
		return db.query(tableName, columns, where, args, null, null, orderBy);
	}


}
